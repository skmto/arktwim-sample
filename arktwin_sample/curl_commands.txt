# ArkTwin Center, Edge (Vehicle), Edge (Pedestrian) が起動
# - ArkTwin Center: http://127.0.0.1:2236
# - Vehicle Edge: http://127.0.0.1:2237
# - Pedestrian Edge: http://127.0.0.1:2238

java -Dconfig.file=center.conf -XX:+UseZGC -XX:+ZGenerational -jar arktwin-center.jar
java -Dconfig.file=edge-vehicle.conf -XX:+UseZGC -XX:+ZGenerational -jar arktwin-edge.jar
java -Dconfig.file=edge-pedestrian.conf -XX:+UseZGC -XX:+ZGenerational -jar arktwin-edge.jar

# ArkTwin Agent  - curl Commands
# コマンドプロンプトにコピー&ペーストして実行してください

# ===========================================
# 1. ヘルスチェック (各サービスが起動しているか確認)
# ===========================================

# ArkTwin Center ヘルスチェック
curl -X GET "http://127.0.0.1:2236/health"

# Vehicle Edge ヘルスチェック  
curl -X GET "http://127.0.0.1:2237/health"

# Pedestrian Edge ヘルスチェック
curl -X GET "http://127.0.0.1:2238/health"

# ===========================================
# 2. 車両エージェント登録
# ===========================================

curl -X POST "http://127.0.0.1:2237/api/edge/agents"  -H "Content-Type: application/json" --data @vehicle_agents.json

# postで送信した agentId の後ろに固有のIDが付いてインスタンス化される。保存して、位置をupdateする。 
# レスポンス例: 
# {
#   "agents": [
#     {
#       "agentId": "vehicle-001-20240101-120000-abc123",
#       "kind": "vehicle",
#       "status": {},
#       "assets": {}
#     },
#     ...
#   ]
# }

# ===========================================
# 3. 歩行者エージェント登録
# ===========================================

curl -X POST "http://127.0.0.1:2238/api/edge/agents" -H "Content-Type: application/json"  --data @pedestrian_agents.json

# ===========================================
# 4. エージェント位置情報更新 (例)
# ===========================================
# 注意: agentId は登録時のレスポンスで返された実際のIDに置き換えてください

# 車両の位置更新例 (vehicle_position_update.json のagentIdを実際のIDに置き換えてください)
curl -X PUT "http://127.0.0.1:2237/api/edge/agents" -H "Content-Type: application/json"  --data @vehicle_position_update.json

# 歩行者の位置更新例 (pedestrian_position_update.json のagentIdを実際のIDに置き換えてください)
curl -X PUT "http://127.0.0.1:2238/api/edge/agents" -H "Content-Type: application/json" --data @pedestrian_position_update.json

# ===========================================
# 5. 近隣エージェント検索
# ===========================================
# 注意: agentId は登録時のレスポンスで返された実際のIDに置き換えてください

# 車両から近隣エージェントを検索 (vehicle_neighbor_query.json のagentIdを実際のIDに置き換えてください)
curl -X POST "http://127.0.0.1:2237/api/edge/neighbors/_query" -H "Content-Type: application/json" --data @vehicle_neighbor_query.json

# 歩行者から近隣エージェントを検索 (pedestrian_neighbor_query.json のagentIdを実際のIDに置き換えてください)
curl -X POST "http://127.0.0.1:2238/api/edge/neighbors/_query" ^
  -H "Content-Type: application/json" ^
  --data @pedestrian_neighbor_query.json

# ===========================================
# 6. API ドキュメントとビューワー
# ===========================================
# ブラウザでアクセス:

# Vehicle Edge API ドキュメント
# http://127.0.0.1:2237/docs/

# Pedestrian Edge API ドキュメント  
# http://127.0.0.1:2238/docs/

# Vehicle Edge ビューワー
# http://127.0.0.1:2237/viewer/

# Pedestrian Edge ビューワー
# http://127.0.0.1:2238/viewer/

# ===========================================
# 使用手順
# ===========================================
# 1. まずヘルスチェックで各サービスが起動していることを確認
# 2. 車両エージェントと歩行者エージェントを登録
# 3. 登録レスポンスで返されたagentIdをメモ
# 4. 実際のagentIdを使って位置更新や近隣検索を実行
# 5. ブラウザでビューワーを開いて可視化を確認

# ===========================================
# 重要なポイント
# ===========================================
# - agentIdPrefixで登録すると、ArkTwinが一意のagentIdを生成します
# - 生成されたagentIdは後続の操作（位置更新、近隣検索）で必要です
# - 座標系は x=East, y=North, z=Up です
# - 車両の検出範囲は200m、歩行者は100mに設定されています
# - timestampは UNIX時間（秒）+ ナノ秒で指定します

# ===========================================
# 使用するJSONファイル一覧
# ===========================================
# vehicle_agents.json - 車両エージェント登録用
# pedestrian_agents.json - 歩行者エージェント登録用
# vehicle_position_update.json - 車両位置更新用 (agentIdを修正してください)
# pedestrian_position_update.json - 歩行者位置更新用 (agentIdを修正してください)
# vehicle_neighbor_query.json - 車両近隣検索用 (agentIdを修正してください)
# pedestrian_neighbor_query.json - 歩行者近隣検索用 (agentIdを修正してください)